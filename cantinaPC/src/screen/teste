import { useEffect, useState } from "react";
import {
  collection,
  query,
  onSnapshot,
  getDocs,
  doc,
  updateDoc,
  getDoc,
} from "firebase/firestore";
import { database } from "../config/firebaseconfig";
import { formatInTimeZone } from "date-fns-tz";
import GetTotalOrders from "../hook/getTotalOrders";

interface OrdersList {
  id: string;
  addedAt: any;
  orderDetails: any[];
  paymentMethod: string;
  total: string;
  observation: string;
  user: string;
  userName: string;
  userImage: string;
  status: string;
  pickupTime: string;
  quantity: number;
}

interface Foods {
  id: string;
  name: string;
  description: string;
  value: string;
  imgURL: string;
  order: number;
  quantity: number;
  idCart: string;
}

export function List() {
  const [ordersList, setOrdersList] = useState<OrdersList[]>([]);
  const [acceptedOrders, setAcceptedOrders] = useState<OrdersList[]>([]);
  const [feedbacks, setFeedbacks] = useState<Record<string, string>>({});
  const [loading, setLoading] = useState<string | null>(null);
  const [foods, setFoods] = useState<Foods[]>([]);
  const [detailedFoods, setDetailedFoods] = useState<any[]>([]);

  console.log(acceptedOrders, "Aceito");

  // Quando você atualizar o status para 'Produzindo', salve os pedidos aceitos
  const updateOrderStatus = async (orderId: string, newStatus: string) => {
    setLoading(orderId);
    const orderRef = doc(database, "orders", orderId);

    try {
      await updateDoc(orderRef, {
        status: newStatus,
      });

      const updatedFeedbacks = {
        ...feedbacks,
        [orderId]:
          newStatus === "Produzindo"
            ? "Pedido aceito e agora está sendo produzido!"
            : "Pedido entregue!",
      };

      setFeedbacks(updatedFeedbacks);
      localStorage.setItem("feedbacks", JSON.stringify(updatedFeedbacks));

      if (newStatus === "Produzindo") {
        const acceptedOrder = ordersList.find((order) => order.id === orderId);
        setAcceptedOrders((prev) => {
          const updatedOrders = acceptedOrder ? [...prev, acceptedOrder] : prev;
          localStorage.setItem("acceptedOrders", JSON.stringify(updatedOrders)); // Salva no localStorage
          return updatedOrders;
        });
        setOrdersList((prev) => prev.filter((order) => order.id !== orderId));
      } else if (newStatus === "Entregue") {
        setAcceptedOrders((prev) =>
          prev.filter((order) => order.id !== orderId)
        );
      }
    } catch (error) {
      console.error("Erro ao atualizar status do pedido: ", error);
      const updatedFeedbacks = {
        ...feedbacks,
        [orderId]: "Erro ao atualizar o status do pedido. Tente novamente.",
      };
      setFeedbacks(updatedFeedbacks);
    } finally {
      setLoading(null);
    }
  };

  const fetchUserById = async (
    userId: string
  ): Promise<{ name: string; photoURL: string }> => {
    try {
      // Obtenha a referência direta ao documento do usuário usando `doc`
      const userRef = doc(database, "user", userId);
      const userDoc = await getDoc(userRef);

      if (userDoc.exists()) {
        const userData = userDoc.data();
        return {
          name: userData.name,
          photoURL: userData.photoURL || "", // Adiciona fallback para photoURL
        };
      }
      return { name: "Usuário desconhecido", photoURL: "" };
    } catch (error) {
      console.error("Erro ao buscar usuário: ", error);
      return { name: "Erro ao buscar usuário", photoURL: "" };
    }
  };

  useEffect(() => {
    const fetchOrders = () => {
      const ordersCollection = collection(database, "orders");
      const today = formatInTimeZone(
        new Date(),
        "America/Sao_Paulo",
        "yyyy-MM-dd"
      );

      const q = query(ordersCollection);
      const unsubscribe = onSnapshot(q, async (querySnapshot) => {
        const list: OrdersList[] = [];
        const promises = querySnapshot.docs.map(async (doc) => {
          const orderData = doc.data() as OrdersList;
          const orderDate = formatInTimeZone(
            orderData.addedAt.toDate(),
            "America/Sao_Paulo",
            "yyyy-MM-dd"
          );

          // Verifique se o pedido é do dia atual e se o status não é "Entregue"
          if (orderDate === today && orderData.status !== "Entregue") {
            const { name, photoURL } = await fetchUserById(orderData.user);
            list.push({
              ...orderData,
              id: doc.id,
              userName: name,
              userImage: photoURL,
            });
          }
        });

        await Promise.all(promises);

        list.sort((a, b) => {
          const timeA = a.pickupTime.split(":").map(Number);
          const timeB = b.pickupTime.split(":").map(Number);
          return timeA[0] - timeB[0] || timeA[1] - timeB[1];
        });

        setOrdersList(list);
      });

      return () => unsubscribe();
    };

    fetchOrders();
  }, []);

  useEffect(() => {
    const fetchFoods = async () => {
      const productsCollection = collection(database, "products");
      const querySnapshot = await getDocs(productsCollection);
      const list: Foods[] = [];

      querySnapshot.forEach((doc) => {
        list.push({ ...doc.data(), id: doc.id } as Foods);
      });
      setFoods(list);
    };

    fetchFoods();
  }, []);

  useEffect(() => {
    const orderProductDetails = ordersList.flatMap((order) => {
      if (!Array.isArray(order.orderDetails)) {
        console.warn(
          `Order ${order.id} has orderDetails of type ${typeof order.orderDetails}`
        );
        return [];
      }
      return order.orderDetails.map((detail) => ({
        productId: detail.id,
        orderId: order.id,
        addedAt: order.addedAt,
        paymentMethod: order.paymentMethod,
        observation: detail.observation || "",
        quantity: detail.quantity || "Quantidade não informada",
      }));
    });

    const matchedFoods = orderProductDetails
      .map((detail) => {
        const food = foods.find((f) => f.id === detail.productId);
        return food ? { ...food, ...detail } : null;
      })
      .filter((item) => item !== null);

    setDetailedFoods(matchedFoods);
  }, [ordersList, foods]);

  useEffect(() => {
    const storedAcceptedOrders = localStorage.getItem("acceptedOrders");
    if (storedAcceptedOrders) {
      setAcceptedOrders(JSON.parse(storedAcceptedOrders));
    }
  }, []);

  return (
    <div className="h-full flex flex-row w-full gap-4">
      <div className="flex-1 py-4 px-10 flex flex-col gap-6 shadow-lg bg-white rounded-lg text-center">
        <h3 className="text-2xl font-semibold text-gray-800">
          Pedidos de Hoje - {ordersList.length}
        </h3>
        <div className="border-b border-gray-300 mb-4" />

        <div className="gap-4 overflow-y-auto max-w-full flex-wrap grid grid-cols-1 lg:grid-cols-2 max-h-[490px] pr-2">
          {ordersList.map((order) => (
            <div
              key={order.id}
              className="rounded-lg w-auto h-auto shadow-xl mb-4 "
            >
              <div className="flex flex-row gap-4 p-4 rounded-t-lg bg-gray-400  ">
                <img
                  src={order.userImage || "/path/to/default/image.jpg"} // Use a imagem do usuário ou uma padrão
                  className="w-28 rounded-lg bg-gray-200 object-cover"
                  alt="Usuário"
                />
                <div className="text-left justify-between flex flex-col">
                  <p className="text-2xl font-semibold text-gray-800">
                    {order.userName}
                  </p>
                  <p className="text-lg font-medium text-white bg-black/50 px-4 py-1 rounded-full w-min whitespace-nowrap">
                    {order.paymentMethod}
                  </p>
                  <p className="text-lg text-gray-600 whitespace-nowrap w-min">
                    Entregar às:{" "}
                    <span className="font-bold text-gray-800">
                      {order.pickupTime}
                    </span>
                  </p>
                </div>
              </div>

              <div className="p-3 flex flex-col h-72 justify-between">
                <div className="mb-4 overflow-y-auto items-start w-full">
                  {detailedFoods
                    .filter((food) => food.orderId === order.id)
                    .map((item, index, array) => (
                      <div
                        key={item.productId}
                        className={`flex justify-between mb-2  ${index !== array.length - 1 ? "border-b border-gray-400" : ""}`}
                      >
                        <p className="text-lg font-semibold text-gray-800 w-full text-start whitespace-break-spaces">
                          {item.quantity === "Quantidade não informada"
                            ? `${item.quantity} - `
                            : `${item.quantity}x - `}
                          {item.name} -{" "}
                          <span className="text-base text-gray-500 w-full">
                            {item.observation || "Sem observações"}
                          </span>
                        </p>
                        <p className="text-laranja-100 font-semibold whitespace-nowrap">
                          R$ {item.value}
                        </p>
                      </div>
                    ))}
                </div>

                <div className="pt-3">
                  <div className="flex justify-between border-b-2 border-gray-400">
                    <span className="font-semibold text-lg">
                      Total:{" "}
                      <span className="text-laranja-100 font-bold text-xl">
                        R$ {order.total}
                      </span>
                    </span>
                  </div>

                  {feedbacks[order.id] ? (
                    <p className="mt-2 text-sm text-green-500">
                      {feedbacks[order.id]}
                    </p>
                  ) : (
                    <button
                      onClick={() => updateOrderStatus(order.id, "Produzindo")}
                      className="w-full text-white uppercase font-medium p-3 rounded-lg mt-4 bg-gray-400"
                      disabled={loading === order.id}
                    >
                      {loading === order.id ? "Processando..." : "Aceitar"}
                    </button>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Coluna da direita: Pedidos aceitos */}
      <div className="flex-1 py-4 px-10 flex flex-col gap-6 shadow-lg bg-white rounded-lg text-center">
        <h3 className="text-2xl font-semibold text-gray-800">
          Pedidos Aceitos - {acceptedOrders.length}
        </h3>
        <div className="border-b border-gray-300 mb-4" />

        <div className="gap-4 overflow-y-auto max-w-full flex-wrap grid grid-cols-1 lg:grid-cols-2 max-h-[490px] pr-2">
          {acceptedOrders.map((order) => (
            <div
              key={order.id}
              className="rounded-lg w-auto h-auto shadow-xl mb-4"
            >
              <div className="flex flex-row gap-4 p-4 rounded-t-lg bg-gray-400  ">
                <img
                  src={order.userImage || "/path/to/default/image.jpg"} // Use a imagem do usuário ou uma padrão
                  className="w-28 rounded-lg bg-gray-200 object-cover"
                  alt="Usuário"
                />
                <div className="text-left justify-between flex flex-col">
                  <p className="text-2xl font-semibold text-gray-800">
                    {order.userName}
                  </p>
                  <p className="text-lg font-medium text-white bg-black/50 px-4 py-1 rounded-full w-min whitespace-nowrap">
                    {order.paymentMethod}
                  </p>
                  <p className="text-lg text-gray-600 whitespace-nowrap w-min">
                    Entregar às:{" "}
                    <span className="font-bold text-gray-800">
                      {order.pickupTime}
                    </span>
                  </p>
                </div>
              </div>
              <div className="p-3 flex flex-col h-72 justify-between">
                <div className="p-3 flex flex-col h-72 justify-between">
                  <div className="mb-4 overflow-y-auto items-start w-full">
                    {detailedFoods
                      .filter((food) => food.orderId === order.id)
                      .map((item, index, array) => (
                        <div
                          key={item.productId}
                          className={`flex justify-between mb-2  ${index !== array.length - 1 ? "border-b border-gray-400" : ""}`}
                        >
                          <p className="text-lg font-semibold text-gray-800 w-full text-start whitespace-break-spaces">
                            {item.quantity === "Quantidade não informada"
                              ? `${item.quantity} - `
                              : `${item.quantity}x - `}
                            {item.name} -{" "}
                            <span className="text-base text-gray-500 w-full">
                              {item.observation || "Sem observações"}
                            </span>
                          </p>
                          <p className="text-laranja-100 font-semibold whitespace-nowrap">
                            R$ {item.value}
                          </p>
                        </div>
                      ))}
                  </div>

                  <div className="pt-3">
                    <div className="flex justify-between border-b-2 border-gray-400">
                      <span className="font-semibold text-lg">
                        Total:{" "}
                        <span className="text-laranja-100 font-bold text-xl">
                          R$ {order.total}
                        </span>
                      </span>
                    </div>

                    <button
                      onClick={() => updateOrderStatus(order.id, "Entregue")}
                      className="w-full text-white uppercase font-medium p-3 rounded-lg mt-4 bg-green-500"
                      disabled={loading === order.id}
                    >
                      {loading === order.id ? "Processando..." : "Entregar"}
                    </button>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}
